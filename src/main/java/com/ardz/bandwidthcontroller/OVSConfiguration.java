/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ardz.bandwidthcontroller;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author ardzix
 */
public class OVSConfiguration extends javax.swing.JFrame {

    OvsVsctlHandler ovs = new OvsVsctlHandler();
    int queueSelected = -1;
    int switchSelected = -1;

    /**
     * Creates new form OVSConfiguration
     */
    public OVSConfiguration() {
        initComponents();
        initPosition();
        final String[] listSwitchElement = ovs.getBridgesStringArray();
        switchList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = listSwitchElement;

            public int getSize() {
                return strings.length;
            }

            public Object getElementAt(int i) {
                return strings[i];
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        switchList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        queueList = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        maxBandwidthTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        applyBandwidth = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        removeQueue = new javax.swing.JButton();
        addQueue = new javax.swing.JButton();
        setQoS = new javax.swing.JButton();
        cleanOVS = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("QoS Configuration");
        setBounds(new java.awt.Rectangle(100, 100, 0, 0));

        switchList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        switchList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                switchListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(switchList);

        jLabel1.setText("Switch List:");

        jLabel2.setText(">>");

        jLabel3.setText("Queue List:");

        queueList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        queueList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                queueListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(queueList);

        jLabel4.setText("Max Bandwidth:");

        maxBandwidthTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxBandwidthTextFieldActionPerformed(evt);
            }
        });

        jLabel5.setText("bps");

        applyBandwidth.setText("Apply");
        applyBandwidth.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                applyBandwidthMouseClicked(evt);
            }
        });
        applyBandwidth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyBandwidthActionPerformed(evt);
            }
        });

        removeQueue.setText("Remove");
        removeQueue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeQueueMouseClicked(evt);
            }
        });

        addQueue.setText("Add");
        addQueue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addQueueMouseClicked(evt);
            }
        });

        setQoS.setText("Set QoS");
        setQoS.setToolTipText("Set QoS to selected switch");
        setQoS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                setQoSMouseClicked(evt);
            }
        });

        cleanOVS.setText("Clean OVS");
        cleanOVS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cleanOVSMouseClicked(evt);
            }
        });
        cleanOVS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanOVSActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel1)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addQueue)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(removeQueue))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addComponent(setQoS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel4)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(maxBandwidthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel5))
                                    .addComponent(applyBandwidth)
                                    .addComponent(cleanOVS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel3)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(maxBandwidthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel5))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(applyBandwidth)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(setQoS, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(removeQueue)
                                    .addComponent(addQueue)
                                    .addComponent(cleanOVS)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jLabel2)))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void switchListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_switchListMouseClicked
        // TODO add your handling code here:d
        this.switchSelected = switchList.getLeadSelectionIndex();
        System.out.println("Switch selected index : " + this.switchSelected);
        updateQueue();
    }//GEN-LAST:event_switchListMouseClicked

    private void maxBandwidthTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxBandwidthTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maxBandwidthTextFieldActionPerformed

    private void applyBandwidthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyBandwidthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_applyBandwidthActionPerformed

    private void queueListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_queueListMouseClicked
        // TODO add your handling code here:
        if (this.switchSelected < 0) {
            JOptionPane.showMessageDialog(rootPane, "Please select switch");
        } else {
            this.queueSelected = queueList.getSelectedIndex();
            System.out.println("Queue selected index : " + this.queueSelected);
            String[] maxBandwidth = ovs.getQueuesStringArray();
            maxBandwidthTextField.setText(maxBandwidth[this.queueSelected]);
        }
    }//GEN-LAST:event_queueListMouseClicked

    private void addQueueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addQueueMouseClicked
        // TODO add your handling code here:
        if (this.switchSelected < 0) {
            JOptionPane.showMessageDialog(rootPane, "Please select switch");
        } else {
            ovs.addQueues(ovs.getDefaultMaxBandwidth());
            updateQueue();
        }
    }//GEN-LAST:event_addQueueMouseClicked

    private void applyBandwidthMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_applyBandwidthMouseClicked
        // TODO add your handling code here:

        if (this.switchSelected < 0) {
            JOptionPane.showMessageDialog(rootPane, "Please select switch");
        } else if (this.queueSelected < 0) {
            JOptionPane.showMessageDialog(rootPane, "Please select queue");
        } else {
            if (this.queueSelected == 0) {
                ovs.setDefaultMaxBandwidth(Integer.valueOf(maxBandwidthTextField.getText()));
            } else {
                ovs.replaceQueues(this.queueSelected, Integer.valueOf(maxBandwidthTextField.getText()));
            }

            JOptionPane.showMessageDialog(rootPane, "Successfully applied");
        }
    }//GEN-LAST:event_applyBandwidthMouseClicked

    private void removeQueueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeQueueMouseClicked
        // TODO add your handling code here:

        if (this.queueSelected == 0) {
            JOptionPane.showMessageDialog(rootPane, "Default queue can not be deleted");
        } else if (this.queueSelected > 0) {
            int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure?", "Warning", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.YES_OPTION) {
                ovs.removeQueues(this.queueSelected);
                updateQueue();
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Please select queue");
        }
    }//GEN-LAST:event_removeQueueMouseClicked

    private void cleanOVSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanOVSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cleanOVSActionPerformed

    private void setQoSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_setQoSMouseClicked
        // TODO add your handling code here:

        if (this.switchSelected < 0) {
            JOptionPane.showMessageDialog(rootPane, "Please select switch");
        } else {
            int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure?", "Warning", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.YES_OPTION) {
                String command = ovs.setCommand(this.switchSelected + 1);
                try {
                    ovs.executeCommand(command);
                } catch (IOException ex) {
                    Logger.getLogger(OVSConfiguration.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_setQoSMouseClicked

    private void cleanOVSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cleanOVSMouseClicked
        // TODO add your handling code here:
        int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure?\n\ncleaning OVS will delete QoS and Queue data.\nIf you using mininet, please stop it first", "Warning", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.YES_OPTION) {
            try {
                ovs.executeCommand(ovs.cleanQoS());
                ovs.executeCommand(ovs.cleanQueue());
            } catch (IOException ex) {
                Logger.getLogger(OVSConfiguration.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
    }//GEN-LAST:event_cleanOVSMouseClicked

    private void queueAddElement(final String[] queues) {
        queueList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = queues;

            public int getSize() {
                return strings.length;
            }

            public Object getElementAt(int i) {
                return strings[i];
            }
        });
    }

    private void updateQueue() {

        String[] queuesMaxBandwidth = ovs.getQueuesStringArray();
        int queuesStringSize = queuesMaxBandwidth.length;
        String[] queuesString = new String[queuesStringSize + 1];
        queuesString[0] = "default";
        for (int i = 1; i < queuesStringSize; i++) {
            queuesString[i] = "queue" + i;
        }
        queueAddElement(queuesString);
    }

    private void initPosition() {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = this.getSize();
        if (frameSize.height > screenSize.height) {
            frameSize.height = screenSize.height;
        }
        if (frameSize.width > screenSize.width) {
            frameSize.width = screenSize.width;
        }
        this.setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);
        this.toFront();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OVSConfiguration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OVSConfiguration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OVSConfiguration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OVSConfiguration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OVSConfiguration().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addQueue;
    private javax.swing.JButton applyBandwidth;
    private javax.swing.JButton cleanOVS;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField maxBandwidthTextField;
    private javax.swing.JList queueList;
    private javax.swing.JButton removeQueue;
    private javax.swing.JButton setQoS;
    private javax.swing.JList switchList;
    // End of variables declaration//GEN-END:variables

}
