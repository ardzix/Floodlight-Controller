/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ardz.bandwidthcontroller;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.IOException;
import java.math.BigInteger;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import org.apache.commons.codec.binary.Hex;
import org.json.simple.JSONObject;

/**
 *
 * @author ardzix
 */
public class firewallRuleConfiguration extends javax.swing.JFrame {

    HttpClientHandler http = new HttpClientHandler();
    JSONObject firewallList = null;

    /**
     * Creates new form firewallRule
     */
    public firewallRuleConfiguration() {
        initComponents();
        initPosition();
        initCompability();
        setSwitch();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        firewallListSwitch = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        srcInportLabel = new javax.swing.JLabel();
        switchLabel = new javax.swing.JLabel();
        srcMacLabel = new javax.swing.JLabel();
        dstMacLabel = new javax.swing.JLabel();
        dlTypeLabel = new javax.swing.JLabel();
        srcIpLabel = new javax.swing.JLabel();
        dstIpLabel = new javax.swing.JLabel();
        nwProtoLabel = new javax.swing.JLabel();
        tpSrcLabel = new javax.swing.JLabel();
        tpDstLabel = new javax.swing.JLabel();
        priorityLabel = new javax.swing.JLabel();
        actionLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Firewall Configuration");

        jLabel1.setText("Firewall List:");

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        firewallListSwitch.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        firewallListSwitch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                firewallListSwitchMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(firewallListSwitch);

        jLabel2.setText("Switch :");

        jLabel3.setText("Src-inport :");

        jLabel4.setText("Src-mac :");

        jLabel5.setText("Dst-mac :");

        jLabel6.setText("Dl-type :");

        jLabel7.setText("Src-ip :");

        jLabel8.setText("Dst-ip :");

        jLabel9.setText("Nw-proto :");

        jLabel10.setText("Tp-src :");

        jLabel11.setText("Tp-dst :");

        jLabel12.setText("Priority :");

        jLabel13.setText("Action :");

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        srcInportLabel.setText("-");

        switchLabel.setText("-");

        srcMacLabel.setText("-");

        dstMacLabel.setText("-");

        dlTypeLabel.setText("-");

        srcIpLabel.setText("-");

        dstIpLabel.setText("-");

        nwProtoLabel.setText("-");

        tpSrcLabel.setText("-");

        tpDstLabel.setText("-");

        priorityLabel.setText("-");

        actionLabel.setText("-");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(refreshButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(srcMacLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(switchLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(srcInportLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel13))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dstMacLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dlTypeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(srcIpLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dstIpLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(nwProtoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(tpSrcLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(tpDstLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(priorityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(actionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(refreshButton))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(switchLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(srcInportLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(srcMacLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(dstMacLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(dlTypeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(srcIpLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(dstIpLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(nwProtoLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(tpSrcLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(tpDstLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(priorityLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(actionLabel))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(deleteButton))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
        setSwitch();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void firewallListSwitchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_firewallListSwitchMouseClicked
        JSONObject selectedFirewall = (JSONObject) this.firewallList.get(firewallListSwitch.getSelectedIndex());
        String srcIp = longToIp(Long.parseLong(selectedFirewall.get("nw_src_prefix").toString())) + "/" + selectedFirewall.get("nw_src_maskbits").toString();
        if (srcIp.equalsIgnoreCase("0.0.0.0/0")) {
            srcIp = "-";
        }
        String dstIp = longToIp(Long.parseLong(selectedFirewall.get("nw_dst_prefix").toString())) + "/" + selectedFirewall.get("nw_dst_maskbits").toString();
        if (dstIp.equalsIgnoreCase("0.0.0.0/0")) {
            dstIp = "-";
        }
        String switchDPID = selectedFirewall.get("dpid").toString();
        if (switchDPID.equalsIgnoreCase("-1")) {
            switchDPID = "-";
        }
        String srcMacString = selectedFirewall.get("dl_src").toString();
        if (!srcMacString.equals("0")) {
            srcMacString = longToHexString(Long.parseLong(srcMacString));
        } else {
            srcMacString = "-";
        }
        String dstMacString = selectedFirewall.get("dl_dst").toString();
        if (!dstMacString.equals("0")) {
            dstMacString = longToHexString(Long.parseLong(dstMacString));
        } else {
            dstMacString = "-";
        }
        String inPort = selectedFirewall.get("in_port").toString();
        if (inPort.equals("0")) {
            inPort = "-";
        }
        int nwProtoInt = Integer.parseInt(selectedFirewall.get("nw_proto").toString());
        String nwProto;
        if (nwProtoInt == 1) {
            nwProto = "ICMP";
        } else if (nwProtoInt == 17) {
            nwProto = "UDP";
        } else {
            nwProto = "TCP";
        }
        String tpSrc = selectedFirewall.get("tp_src").toString();
        if (tpSrc.equals("0")) {
            tpSrc = "-";
        }
        String tpDst = selectedFirewall.get("tp_dst").toString();
        if (tpDst.equals("0")) {
            tpDst = "-";
        }

        srcIpLabel.setText(srcIp);
        dstIpLabel.setText(dstIp);
        switchLabel.setText(switchDPID);
        actionLabel.setText(selectedFirewall.get("action").toString());
        srcMacLabel.setText(srcMacString);
        dstMacLabel.setText(dstMacString);
        srcInportLabel.setText(inPort);
        dlTypeLabel.setText(selectedFirewall.get("dl_type").toString());
        nwProtoLabel.setText(nwProto);
        priorityLabel.setText(selectedFirewall.get("priority").toString());
        tpSrcLabel.setText(tpSrc);
        tpDstLabel.setText(tpDst);

    }//GEN-LAST:event_firewallListSwitchMouseClicked

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        JSONObject selectedQoS = (JSONObject) this.firewallList.get(firewallListSwitch.getSelectedIndex());
        int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure?", "Warning", JOptionPane.YES_NO_OPTION);
        if (dialogResult == JOptionPane.YES_OPTION) {
            try {
                http.sendDelete("http://"+Util.getControllerAddres()+"/wm/firewall/rules/json", "{\"ruleid\":" + selectedQoS.get("ruleid").toString() + "}");
            } catch (IOException ex) {
                Logger.getLogger(PolicyConfiguration.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        setSwitch();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        AddFirewallRule.main(http);
    }//GEN-LAST:event_addButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(firewallRuleConfiguration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(firewallRuleConfiguration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(firewallRuleConfiguration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(firewallRuleConfiguration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new firewallRuleConfiguration().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel actionLabel;
    private javax.swing.JButton addButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel dlTypeLabel;
    private javax.swing.JLabel dstIpLabel;
    private javax.swing.JLabel dstMacLabel;
    private javax.swing.JList firewallListSwitch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nwProtoLabel;
    private javax.swing.JLabel priorityLabel;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLabel srcInportLabel;
    private javax.swing.JLabel srcIpLabel;
    private javax.swing.JLabel srcMacLabel;
    private javax.swing.JLabel switchLabel;
    private javax.swing.JLabel tpDstLabel;
    private javax.swing.JLabel tpSrcLabel;
    // End of variables declaration//GEN-END:variables

    private void initPosition() {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = this.getSize();
        if (frameSize.height > screenSize.height) {
            frameSize.height = screenSize.height;
        }
        if (frameSize.width > screenSize.width) {
            frameSize.width = screenSize.width;
        }
        this.setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);
        this.toFront();
    }

    private void initCompability() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            SwingUtilities.updateComponentTreeUI(this);

        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {

        }
    }

    private void setSwitch() {

        try {
            JSONObject firewall = http.sendGet("http://"+Util.getControllerAddres()+"/wm/firewall/rules/json");
            final int firewallSize = firewall.size();
            final String[] strings = new String[firewallSize];
            for (int i = 0; i < firewallSize; i++) {
                int iPlus = i + 1;
                strings[i] = "Firewall " + iPlus;
            }

            firewallListSwitch.setModel(new javax.swing.AbstractListModel() {
                public int getSize() {
                    return firewallSize;
                }

                public Object getElementAt(int i) {
                    return strings[i];
                }
            });

            this.firewallList = firewall;
        } catch (Exception ex) {
            Logger.getLogger(firewallRuleConfiguration.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public String longToIp(long ip) {

        return ((ip >> 24) & 0xFF) + "."
                + ((ip >> 16) & 0xFF) + "."
                + ((ip >> 8) & 0xFF) + "."
                + (ip & 0xFF);

    }

    private String longToHexString(long foo) {
        char[] hexString = Long.toHexString(foo).toCharArray();
        String hexStringPadd = String.valueOf(hexString[0]) + String.valueOf(hexString[1]);
        for (int i = 2; i < hexString.length; i = i + 2) {
            hexStringPadd = hexStringPadd + ":" + String.valueOf(hexString[i]) + String.valueOf(hexString[i + 1]);
        }
        return hexStringPadd;
    }

}
